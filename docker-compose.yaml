version: "3.6"

x-environment-defaults: &default-environment
  environment:
    - DEBUG
    - DB_PASS
    - DB_USER
    - DB_NAME
    - DB_PORT
    - DB_HOST
    - DOMAIN
    - SECRET_KEY
    - ALLOWED_HOSTS
    - API_KEY
    - API_NAME
    - ADMIN_URL
    - EMAIL
    - EMAIL_TOKEN
    - CELERY_BROKER
    - TELEGRAM_TOKEN
    - TARGET_CHAT_ID
    - CSRF_TRUSTED_DOMAINS
    - SENTRY_DNS
    - DNS
    - ALLOWED_CHATS
    - EMAIL_SENDER
    - EMAIL_SENDER_TOKEN


services:
  postgres:
    container_name: postgres
    image: postgres:14.3-alpine
    restart: always
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5


  pgbackups:
    container_name: backup
    image: prodrigestivill/postgres-backup-local
    restart: always
    volumes:
      - ./backup:/backups
    links:
      - postgres:postgres
    depends_on:
      - postgres
    environment:
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_EXTRA_OPTS=-Z9 -E UTF-8 --schema=public --blobs
      - SCHEDULE=@weekly
      - BACKUP_KEEP_WEEKS=2


  backend:
    container_name: backend
    build: ./backend
    restart: always
    volumes:
      - ./backend:/usr/src/app
      - static_value:/usr/src/app/static/
      - media_value:/usr/src/app/media/
      - /var/run/docker.sock:/var/run/docker.sock
    <<: *default-environment
    depends_on:
      postgres:
        condition: service_healthy
    command: sh -c /tmp/entrypoint.sh


  redis:
    image: redis:latest
    container_name: redis
    depends_on:
      - postgres
    restart: always


  celery:
    container_name: celery
    build: ./backend
    user: nobody
    depends_on:
      - backend
      - redis
    restart: always
    volumes:
      - ./backend:/usr/src/app
      - static_value:/usr/src/app/static/
      - media_value:/usr/src/app/media/
    <<: *default-environment
    command: celery -A config worker -l error -E -c 2


  flower:
    container_name: flower
    build: ./backend
    command: celery flower --basic_auth=${FLOWER_USER}:${FLOWER_PASS} --port=6666
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - FLOWER_PORT=6666
    expose:
      - 6666
    depends_on:
      - redis
      - celery
    restart: always


  tgbot:
    container_name: tgbot
    build: ./backend
    restart: always
    volumes:
      - ./backend:/usr/src/app
      - static_value:/usr/src/app/static/
      - media_value:/usr/src/app/media/
      - /var/run/docker.sock:/var/run/docker.sock
    <<: *default-environment
    depends_on:
      - backend
      - postgres
    command: sh -c 'uvicorn apps.tgbot.fastapp:app --host 0.0.0.0 --port 5555 & python -m apps.tgbot.main'
    ports:
      - "5555:5555"


  nginx:
    build: ./nginx
    container_name: nginx
    restart: always
    links:
      - backend:backend
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_value:/usr/src/app/static
      - media_value:/usr/src/app/media


  test:
    build: ./backend
    command: python manage.py test
    volumes:
      - ./backend:/usr/src/app
    depends_on:
      - postgres
    <<: *default-environment


volumes:
  postgresql-data:
  static_value:
  media_value:


networks:
  my_network:
    driver: bridge